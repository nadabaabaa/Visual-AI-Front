{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { WebcamUtil } from './modules/webcam/util/webcam.util';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nimport * as i2 from \"@angular/router\";\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    ngOnInit() {\n      this.readAvailableVideoInputs();\n    }\n    triggerSnapshot() {\n      this.trigger.next();\n    }\n    toggleWebcam() {\n      this.showWebcam = !this.showWebcam;\n    }\n    showNextWebcam(directionOrDeviceId) {\n      // true => move forward through devices\n      // false => move backwards through devices\n      // string => move to device with given deviceId\n      this.nextWebcam.next(directionOrDeviceId);\n    }\n    addMessage(message) {\n      console.log(message);\n      this.messages.unshift(message);\n    }\n    get triggerObservable() {\n      return this.trigger.asObservable();\n    }\n    get nextWebcamObservable() {\n      return this.nextWebcam.asObservable();\n    }\n    get videoOptions() {\n      const result = {};\n      if (this.facingMode && this.facingMode !== '') {\n        result.facingMode = {\n          ideal: this.facingMode\n        };\n      }\n      return result;\n    }\n    readAvailableVideoInputs() {\n      WebcamUtil.getAvailableVideoInputs().then(mediaDevices => {\n        this.multipleWebcamsAvailable = mediaDevices && mediaDevices.length > 1;\n      });\n    }\n    constructor(translate) {\n      this.translate = translate;\n      this.title = 'teleport-project-template-angular';\n      // toggle webcam on/off\n      this.showWebcam = false;\n      this.allowCameraSwitch = true;\n      this.multipleWebcamsAvailable = false;\n      this.facingMode = 'environment';\n      this.messages = [];\n      // latest snapshot\n      // webcam snapshot trigger\n      this.trigger = new Subject();\n      // switch to next / previous / specific webcam; true/false: forward/backwards, string: deviceId\n      this.nextWebcam = new Subject();\n      translate.addLangs(['en', 'nl']);\n      translate.setDefaultLang('en');\n    }\n    switchLang(lang) {\n      this.translate.use(lang);\n    }\n    static #_ = this.ɵfac = function AppComponent_Factory(t) {\n      return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.TranslateService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"app-root\"]],\n      decls: 1,\n      vars: 0,\n      template: function AppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"router-outlet\");\n        }\n      },\n      dependencies: [i2.RouterOutlet]\n    });\n  }\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}