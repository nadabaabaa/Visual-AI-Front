{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { WebcamUtil } from 'src/app/modules/webcam/util/webcam.util';\nlet Conversation = class Conversation {\n  constructor(title, meta, http, themeService, translate, languageService) {\n    this.title = title;\n    this.meta = meta;\n    this.http = http;\n    this.themeService = themeService;\n    this.translate = translate;\n    this.languageService = languageService;\n    this.selectedFile = null;\n    // toggle webcam on/off\n    this.showWebcam = false;\n    this.allowCameraSwitch = true;\n    this.multipleWebcamsAvailable = false;\n    this.facingMode = 'environment';\n    this.messages = [];\n    // latest snapshot\n    this.webcamImage = null;\n    // webcam snapshot trigger\n    this.trigger = new Subject();\n    // switch to next / previous / specific webcam; true/false: forward/backwards, string: deviceId\n    this.nextWebcam = new Subject();\n    this.title.setTitle('conversation - Soft UI Pro');\n    this.meta.addTags([{\n      property: 'og:title',\n      content: 'conversation - Soft UI Pro'\n    }]);\n  }\n  toggleTheme() {\n    if (this.themeService.isDarkTheme()) {\n      this.themeService.enableLightMode();\n    } else {\n      this.themeService.enableDarkMode();\n    }\n  }\n  onFileSelected(event) {\n    this.selectedFile = event.target.files[0];\n  }\n  //Send the File to the Server\n  //We have the file, to send it to the server, we can use the Angular HttpClient.\n  //We can either send the file as a binary or as part of a FormData object - whatever your REST API endpoint supports/ expects\n  onUpload() {\n    this.http.post('my-backend.com/file-upload', this.selectedFile).subscribe();\n  }\n  ngOnInit() {\n    this.readAvailableVideoInputs();\n  }\n  triggerSnapshot() {\n    this.trigger.next();\n  }\n  toggleWebcam() {\n    this.showWebcam = !this.showWebcam;\n  }\n  handleInitError(error) {\n    this.messages.push(error);\n    if (error.mediaStreamError && error.mediaStreamError.name === 'NotAllowedError') {\n      this.addMessage('User denied camera access');\n    }\n  }\n  showNextWebcam(directionOrDeviceId) {\n    // true => move forward through devices\n    // false => move backwards through devices\n    // string => move to device with given deviceId\n    this.nextWebcam.next(directionOrDeviceId);\n  }\n  handleImage(webcamImage) {\n    this.addMessage('Received webcam image');\n    console.log(webcamImage);\n    this.webcamImage = webcamImage;\n  }\n  cameraWasSwitched(deviceId) {\n    this.addMessage('Active device: ' + deviceId);\n    this.deviceId = deviceId;\n    this.readAvailableVideoInputs();\n  }\n  addMessage(message) {\n    console.log(message);\n    this.messages.unshift(message);\n  }\n  get triggerObservable() {\n    return this.trigger.asObservable();\n  }\n  get nextWebcamObservable() {\n    return this.nextWebcam.asObservable();\n  }\n  get videoOptions() {\n    const result = {};\n    if (this.facingMode && this.facingMode !== '') {\n      result.facingMode = {\n        ideal: this.facingMode\n      };\n    }\n    return result;\n  }\n  readAvailableVideoInputs() {\n    WebcamUtil.getAvailableVideoInputs().then(mediaDevices => {\n      this.multipleWebcamsAvailable = mediaDevices && mediaDevices.length > 1;\n    });\n  }\n};\nConversation = __decorate([Component({\n  selector: 'app-conversation',\n  templateUrl: 'conversation.component.html',\n  styleUrls: ['conversation.component.css']\n})], Conversation);\nexport { Conversation };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}